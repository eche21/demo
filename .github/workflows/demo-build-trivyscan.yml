###########################################################################################
# THIS DEMO SUCCESSFULLY BUILDS AND DEPLOYS THE DOCKER CONTAINER TO AKS
#THE APP IS TAKEN FROM docs.docker.com/get-started/02_our_app
#THE ZIP FOLDER IS IN MY DOWNLOADS C:\Users\ericn\Downloads\getting-started-master.zip
#########################################################################################
#
#This workflow is triggered on a push to github branch che
name: demo_build_and_deploy_aks_v3

on:
  push:
    branches:
      - echeissue2701      

jobs:

  build-trivy-scan:
    runs-on: ubuntu-latest
    env:
      #Environment variables for Docker image
      DOCKER_REPOSITORY: eche21 # name of Docker Hub ID
      IMAGE_NAME: demoappv3 # name of image
      IMAGE_TAG: ${{ github.sha }} # $GITHUB_SHA the  commit ID
      #
      #variables for AKS cluster and namespace
      CLUSTER_NAME: RegScale
      CLUSTER_RESOURCE_GROUP: Corporate
      NAMESPACE: demo-eche
    
    steps:
#    
#This step checks out the application source code
#
    - name: Git Checkout
      uses: actions/checkout@v2
#  
    - name: shortsha
      run:
       echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV 
        
#This step builds the docker image using docker build. The image is tagged.
# We can also use a step predefined in github market place.
# But we use the command line. The docker cli and the docker daemon are already installed inside  the runner. 
#This gives more flexibility and more control.
#
    - name: Build Docker Image
      run:
        docker build ./app/ --file ./app/Dockerfile --tag $DOCKER_REPOSITORY/$IMAGE_NAME:$SHORT_SHA --build-arg=token=secrets.MYTOKEN --no-cache
#
#SCAN THE IMAGE using the open source tool trivy. Trivy download the image and scans it and look
# for any severity
#
#    - name: Run Trivy vulnerability scanner
#      uses: aquasecurity/trivy-action@master
#      continue-on-error: true
#      with:
#        image-ref: 'docker.io/${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}'
#        format: 'table'
#        exit-code: '1'
#        ignore-unfixed: true
#        vuln-type: 'os,library'
#        severity: 'MEDIUM,HIGH,CRITICAL'
    - name: trivy scan
      id: trivy_scan 
      run: |
        export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
        wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
        mkdir artifacts
        ./trivy image docker.io/${{ env.DOCKER_REPOSITORY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} > artifacts/trivy_results.txt
        echo "artifactPath=artifacts/trivy_results.txt" >> $GITHUB_ENV
        echo TRIVY_RESULTS=$(cat artifacts/trivy_results.txt | grep Total:) >> GITHUB_OUTPUT
    - if: always()
      name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: Trivy Results
        path: ${{ env.artifactPath }}
    - name: Add PR Comment
      env:
        TRIVY_RESULTS: ${{ steps.trivy_scan.outputs.TRIVY_RESULTS }}
      uses: mshick/add-pr-comment@v2
      with:
        message: |
         Trivy Scan Results
         ------------------
         ${{ env.TRIVY_RESULTS }}
        repo-token: ${{ secrets.MYTOKEN }}