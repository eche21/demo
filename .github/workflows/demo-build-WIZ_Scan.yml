###########################################################################################
# THIS DEMO SUCCESSFULLY BUILDS AND DEPLOYS THE DOCKER CONTAINER TO AKS
#THE APP IS TAKEN FROM docs.docker.com/get-started/02_our_app
#THE ZIP FOLDER IS IN MY DOWNLOADS C:\Users\ericn\Downloads\getting-started-master.zip
#########################################################################################
#
#This workflow is triggered on a push to github branch che
name: demo_build_and_wiz_scan
on:
  push:
    branches:
      - echewizcli      
env:
  IMAGE_NAME: eche21/demoappv3 
  
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set Image Tag
      run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
    - name: Docker Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: Build and push RegScale image
      uses: docker/build-push-action@v3
      with:
        push: true
        tags: ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
  wiz-cli-image-scan:
    needs: [build]
    name: 'Wiz-cli Image Scan'
    runs-on: ubuntu-latest
    env:
      POLICY: "Default vulnerabilities policy" # Set the desired Wiz-cli policy to use

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - name: Set Image Tag
      run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
    - name: Docker Login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
    - name: Pull Docker Image
      run: docker pull ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
    - name: Download Wiz-cli
      run: curl -o wizcli https://wizcli.app.wiz.io/wizcli && chmod +x wizcli

    - name: Authenticate to Wiz
      run: ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"
      env:
        WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
        WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}

    - name: Run wiz-cli docker image scan
      run: ./wizcli docker scan --image ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} --policy "$POLICY"
# jobs:

#   build:
#     runs-on: ubuntu-latest
#     env:
#       #Environment variables for Docker image
#       DOCKER_REPOSITORY: eche21 # name of Docker Hub ID
#       IMAGE_NAME: demoappv3 # name of image
#       IMAGE_TAG: ${{ github.sha }} # $GITHUB_SHA the  commit ID
#       #
#       #variables for AKS cluster and namespace
#       CLUSTER_NAME: RegScale
#       CLUSTER_RESOURCE_GROUP: Corporate
#       NAMESPACE: demo-eche
#      #
#  #     SCAN_PATH: "." # Set the relative path in the repo to build the image from
#       TAG: ${{ github.sha }} # Set the tag to use for the image
#       POLICY: "Default vulnerabilities policy" # Set the desired Wiz-cli policy to use

#     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#     defaults:
#       run:
#         shell: bash
#     steps:
# #    
#     - name: Git checkout
#       uses: actions/checkout@v3
# #  
#     - name: shortsha
#       run:        echo "SHORT_SHA=`echo ${GITHUB_SHA} | cut -c1-8`" >> $GITHUB_ENV 
# #This step builds the docker image using docker build. The image is tagged.
# # We can also use a step predefined in github market place.
# # But we use the command line. The docker cli and the docker daemon are already installed inside  the runner. 
# #This gives more flexibility and more control.
# #
#     - name: Build Docker Image
#       run:
#         docker build ./app/ --file ./app/Dockerfile --tag $DOCKER_REPOSITORY/$IMAGE_NAME:$SHORT_SHA --build-arg=token=secrets.MYTOKEN --no-cache

#   wiz-cli-image-scan:
#     needs: [build]
#     name: 'Wiz-cli Image Scan'
#     runs-on: ubuntu-latest
#     env:
#       POLICY: "Default vulnerabilities policy" # Set the desired Wiz-cli policy to use

#     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
#     defaults:
#       run:
#         shell: bash

#     steps:
#     - name: Set Image Tag
#       run: echo "IMAGE_TAG=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV
#     - name: Docker Login
#       uses: docker/login-action@v2
#       with:
#         username: ${{ secrets.DOCKERHUB_USERNAME }}
#         password: ${{ secrets.DOCKERHUB_PASSWORD}}
#     - name: Pull Docker Image
#       run: docker pull $DOCKER_REPOSITORY/$IMAGE_NAME:$SHORT_SHA
#     - name: Download Wiz-cli
#       run: curl -o wizcli https://wizcli.app.wiz.io/wizcli && chmod +x wizcli

#     - name: Authenticate to Wiz
#       run: ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"
#       env:
#         WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
#         WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}

#     - name: Run wiz-cli docker image scan
#       run: ./wizcli docker scan --image $DOCKER_REPOSITORY/$IMAGE_NAME:$SHORT_SHA --policy "$POLICY"    